# Configuration for cargo-deny
# See: https://embarkstudios.github.io/cargo-deny/

[graph]
# If true, metadata will be collected with `--all-features`
all-features = true
# If set, these feature will be enabled when collecting metadata. If `--all-features` is specified, this is ignored
# features = []

[output]
feature-depth = 1

[advisories]
# The path where the advisory database is cloned/fetched into
db-path = "~/.cargo/advisory-db"
# The url(s) of the advisory databases to use
db-urls = ["https://github.com/rustsec/advisory-db"]
# The lint level for when a crate version requirement is vulnerable
vulnerability = "deny"
# The lint level for when a crate version requirement is unmaintained
unmaintained = "warn"
# The lint level for when a crate version requirement is yanked
yanked = "warn"
# The lint level for when a crate version requirement is in a notice
notice = "warn"
# A list of advisory IDs to ignore. Note that ignored advisories will still
# output a note when they are encountered.
ignore = [
    # Allows you to skip certain advisories by ID
]

[licenses]
# The lint level for when unlicensed crates are encountered
unlicensed = "deny"
# List of explicitly allowed licenses
allow = [
    "MIT",
    "Apache-2.0",
    "Apache-2.0 WITH LLVM-exception",
    "BSD-2-Clause",
    "BSD-3-Clause",
    "ISC",
    "Unicode-DFS-2016",
]
# List of explicitly disallowed licenses
deny = [
    "GPL-2.0",
    "GPL-3.0",
    "AGPL-1.0",
    "AGPL-3.0",
]
# Lint level for when a crate version does not have a detectable license
confidence-threshold = 0.8
# Allow 1 or more licenses on a per-crate basis, so that particular licenses aren't accepted for every possible crate as with the normal allow list
exceptions = [
    # Each entry is the crate and version constraint, and its the license
    # { allow = ["Zlib"], name = "adler32" },
]

[bans]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "warn"
# Lint level for when a crate version requirement is wildcarded
wildcards = "allow"
# Lint level for when a banned crate is encountered
deny = [
    # Each entry the name of a crate and a version range. If version is not specified, all versions will be banned
    # { name = "ansi_term", version = "*" },
]
# Certain crates/versions that will be skipped when doing duplicate detection
skip = [
    # Each entry is a crate name and version range
    # { name = "ansi_term", version = "=0.11.0" },
]
# Similarly to `skip` allows you to skip certain crates from being checked for licensing
skip-tree = [
    # Each entry is a crate name and version range
    # { name = "ansi_term", version = "=0.11.0" },
]

[sources]
# Lint level for when a crate from a crate registry that is not in the allow list is encountered
unknown-registry = "warn"
# Lint level for when a crate from a git repository that is not in the allow list is encountered
unknown-git = "warn"
# List of allowed crate registries, only crates.io is allowed by default
allow-registry = ["https://github.com/rust-lang/crates.io-index"]
# List of allowed Git repositories
allow-git = []